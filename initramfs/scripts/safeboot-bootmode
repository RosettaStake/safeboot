#!/bin/sh
# Ensure that the boot mode PCR is set by the init-top initramfs.
# This is run in the initramfs context, not in the normal user space.
#
# turn off "echo flags are undefined"
# shellcheck disable=SC2039

PREFIX="safeboot-bootmode"

case $1 in
    prereqs)
        echo "console_setup"
        exit 0
        ;;
esac

. /scripts/functions

BOOTMODE_PCR=14
MODE=unknown

# Direct access to the kernel resource manager
# since there is no standalone TPM resource manager in the initrd
export TPM2TOOLS_TCTI="device:/dev/tpmrm0"

sha256() { echo -n "$@" | sha256sum | cut -d' ' -f1 ; }
log() { echo >&2 "$@" ; }

# shellcheck disable=SC2013
for arg in $(cat /proc/cmdline)
do
    case "$arg" in
        safeboot.mode=*)
            MODE=${arg#safeboot.mode=}
            ;;
        safeboot.mode-pcr=*)
            BOOTMODE_PCR=${arg#safeboot.mode-pcr=}
            ;;
        *)
            ;;
    esac
done

log "TPM mode=$MODE pcrs=$PCRS $BOOTMODE_PCR"

/usr/sbin/tpm2 pcrread >&2 \
	'sha256:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16'

#
# Extend PCR14 with the boot mode so that recovery
# boots aren't able to access the sealed disk key.
#
if /usr/sbin/tpm2 pcrextend >&2 "$BOOTMODE_PCR:sha256=$(sha256 "$MODE")" ; then
	log_success_msg "$PREFIX: boot mode '$MODE'"
else
	log_failure_msg "$PREFIX: unable to extend boot mode PCR $BOOTMODE_PCR"
fi

if [ "$BOOTMODE" = "recovery" ]; then
	cat >&2 <<EOF
                                           _                 _   
 _ __ ___  ___ _____   _____ _ __ _   _   | |__   ___   ___ | |_ 
| '__/ _ \/ __/ _ \ \ / / _ \ '__| | | |  | '_ \ / _ \ / _ \| __|
| | |  __/ (_| (_) \ V /  __/ |  | |_| |  | |_) | (_) | (_) | |_ 
|_|  \___|\___\___/ \_/ \___|_|   \__, |  |_.__/ \___/ \___/ \__|
==================================|___/==========================

EOF
fi
