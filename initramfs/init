#!/bin/bash
# demo server init:
# this is PXE booted, performs a remote attestation, and then
# hands off control to the the real OS stored on a fully encrypted disk.
# if there are any problems, drops to a serial console shell

/bin/busybox --install /bin
mkdir -p /proc /sys /tmp /dev /etc /root /run /boot
mount -t proc none /proc
mount -t devtmpfs none /dev
mount -t sysfs none /sys
mount -t efivarfs none /sys/firmware/efi/efivars
mount -t securityfs none /sys/kernel/security

echo "Hello, initrd" > /dev/console
echo "Hello, initrd (ttyprintk)" > /dev/ttyprintk
exec < /dev/console >/dev/console 2>/dev/console

# check the hash of the kernel/initrd/cmdline that was booted
tpm2 pcrread sha256:4

# If the firmware includes a separate configuration file,
# source it to set environment variables that will be passed to
# the other scripts.
if [ -x "/etc/config.sh" ]; then
	. "/etc/config.sh"
fi

# Bring up the ethernet to be able to send a remote attestation request
if [ -n "$ETH_DEV" ]; then
	ifconfig "$ETH_DEV" up
	udhcpc -i "$ETH_DEV" -v -q -s /etc/udhcpc.sh
fi

# cache the eventlog for easy analysis
cat /sys/kernel/security/tpm0/binary_bios_measurements > /tmp/eventlog.bin

# try to unlock the TPM, since swtpm tends to not shutdown cleanly
tpm2 dictionarylockout --clear-lockout

# remotely attest and get a secret disk key
while [ -n "$ATTEST_SERVER" ]; do
	ping "$ATTEST_SERVER" \
	|| break

	echo "network is up"
	tpm2-attest \
		attest "$ATTEST_URL" \
		> /tmp/secret.bin \
	|| break;

	cat <<EOF
  ----------------------------
    ┏━┓╺┳╸╺┳╸┏━╸┏━┓╺┳╸┏━╸╺┳┓
    ┣━┫ ┃  ┃ ┣╸ ┗━┓ ┃ ┣╸  ┃┃
    ╹ ╹ ╹  ╹ ┗━╸┗━┛ ╹ ┗━╸╺┻┛
  ----------------------------
EOF

	# Invoke the boot script with the secret that has been sent
	# in the attestation server reply.
	if [ -x "/bin/bootscript" ]; then
		/bin/bootscript < /tmp/secret.bin
	fi

	break;
done


echo "ATTESTATION FAILED!!!" > /dev/ttyprintk

if [ $$ != 1 ]; then
	exit 1
fi

# try to spawn a rescue shell
export PS1='\h:\w# '

if [ -x /bin/setsid ] && [ -x /bin/bash ]; then
	exec setsid -c /bin/bash </dev/console >/dev/console 2>/dev/console
fi

echo "Fallback shell!"
exec /bin/sh </dev/console >/dev/console 2>/dev/console
