#!/bin/bash
/bin/busybox --install /bin
mkdir -p /proc /sys /tmp /dev /etc /root /run /boot
mount -t proc none /proc
mount -t devtmpfs none /dev
mount -t sysfs none /sys
mount -t efivarfs none /sys/firmware/efi/efivars
mount -t securityfs none /sys/kernel/security

echo "Hello, initrd" > /dev/console
echo "Hello, initrd (ttyprintk)" > /dev/ttyprintk
exec < /dev/console >/dev/console 2>/dev/console

#echo "Hello, ttyprintk" > /dev/ttyprintk
echo "hello console" > /dev/console

# qemu hack!
# load modules that are not built into the kernel
# and bring up the network
#insmod /lib/modules/libahci.ko
#insmod /lib/modules/ahci.ko
#insmod /lib/modules/dm-crypt.ko
#insmod /lib/modules/e1000.ko

ifconfig eth0 10.0.2.15

# check the hash of the kernel/initrd/cmdline that was booted
tpm2 pcrread sha256:4
cat /sys/kernel/security/tpm0/binary_bios_measurements > /tmp/eventlog.bin

# try to unlock the TPM, since swtpm tends to not shutdown cleanly
tpm2 dictionarylockout --clear-lockout

# remotely attest and get a secret disk key
export SERVER="10.0.2.2"
while true; do
	#ping -w 5 -c 1 "$SERVER" \
	#
	ping "$SERVER" \
	|| break

	echo "network is up"
	tpm2-attest \
		attest "http://$SERVER:8080/attest/" \
		> /tmp/secret.bin \
	|| break;

	cat <<EOF
  ----------------------------
    ┏━┓╺┳╸╺┳╸┏━╸┏━┓╺┳╸┏━╸╺┳┓
    ┣━┫ ┃  ┃ ┣╸ ┗━┓ ┃ ┣╸  ┃┃
    ╹ ╹ ╹  ╹ ┗━╸┗━┛ ╹ ┗━╸╺┻┛
  ----------------------------
EOF

	# ensure that we don't accidentally touch the root device
	blockdev --setro /dev/sda

	# attempt to decrypt the disk; if this fails, reinstall an image
	if ! cryptsetup luksOpen \
		--key-file /tmp/secret.bin \
		/dev/sda \
		cryptroot \
	; then
		echo >&2 "-------------------"
		echo >&2 "Unable to unlock disk"
		echo >&2 "-------------------"

		read -t 10 -p "Press any key to stop reinstall..." -n 1 response
		if [ -n "$response" ]; then
			break
		fi

		echo >&2 "No init in root filesystem, reinstalling"
		install-img /tmp/secret.bin
	else
		echo "cryptsetup successful"
		mount -o ro /dev/mapper/cryptroot /root \
		|| break

		echo "mount successful"
	fi

	if [ ! -e "/root/boot/vmlinuz" ]; then
		echo >&2 "No kernel?"
		break
	fi

	read -t 3 -p "Press any key to stop autoboot..." -n 1 response
	if [ -n "$response" ]; then
		break
	fi

	boot-img /tmp/secret.bin
	echo >&2 "kexec failed!"
	break
done


echo "FAILED!!!"

if [ $$ != 1 ]; then
	exit 1
fi

# try to spawn a rescue shell
export PS1='\h:\w# '

if [ -x /bin/setsid ] && [ -x /bin/bash ]; then
	exec setsid -c /bin/bash </dev/console >/dev/console 2>/dev/console
fi

echo "Fallback shell!"
exec /bin/sh </dev/console >/dev/console 2>/dev/console
