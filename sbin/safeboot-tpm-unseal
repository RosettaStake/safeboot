#!/bin/bash
# This is run in the initramfs context, not in the normal user space.
# The boot mode should have been extended in the start of the initramfs.
#
# It attempts to unseal the key from the TPM based on the PCRS passed
# on the command line using direct access since there is no resource
# manager.
#
# If successful, PCR14 will be extended to prevent later stages from
# retrieving the decryption key.  The key is stored in a kernel key
# ring, so it should not be accessible to even a root user.
#
# If the unsealing fails, fall back to asking for the user's recovery key.
#
# turn off "echo flags are undefined" and external shell scripts
# shellcheck disable=SC2039 disable=SC1091

PCRS=0
BOOTMODE_PCR=14
MODE=unknown
if [ -z "$DIR" ]; then
	DIR="/etc/safeboot"
fi

for script in safeboot.conf local.conf functions.sh ; do
	[ -r "$DIR/$script" ] && . "$DIR/$script"
done

# Override die to extend the boot mode PCR to indicate the failure
die() {
	echo >&2 "$@"
	tpm2 pcrextend >&2 "$BOOTMODE_PCR:sha256=$(echo bootfail | sha256)"
	touch "/tmp/unseal-failed"
	exit 1
}

# shellcheck disable=SC2013
for arg in $(cat /proc/cmdline)
do
    case "$arg" in
        safeboot.mode=*)
            MODE=${arg#safeboot.mode=}
            ;;
        *)
            ;;
    esac
done

warn "TPM mode=$MODE pcrs=$PCRS $BOOTMODE_PCR"

tpm2 pcrread >&2 \
	'sha256:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16'

if [ "$MODE" = "recovery" ] \
|| [ -r "/tmp/unseal-failed" ] \
; then
	warn "Falling back to user pass phrase"

	# retrieve a tpmtotp attestation so that the user knows
	# that the firmware is unmodified and that it is safe to
	# enter their credentials.
	totp="$(/usr/sbin/tpm2-totp --time calculate || echo TPM TOTP FAILED)"
	msg="$totp $MODE

Enter recovery key for $CRYPTTAB_SOURCE ($CRYPTTAB_NAME): "

	/lib/cryptsetup/askpass "$msg"
	exit $?
fi

#
# This is not a recovery boot, try to unseal the secret using the TPM,
# the current NV version and optional user PIN.
#
# Extract the signature from the UEFI variable, skipping
# the four-byte UEFI variable header.

VERSION="$(tpm2 nvread "$TPM_NV_VERSION" | bin2hex)"
TPM_SESSION_TYPE=policy
TPM_POLICY_SIG="$TMP/pcr.policy.sig"

efivar-read "$PCR_SIGNATURE" > "$TPM_POLICY_SIG"

tpm2_create_policy "" "$VERSION"

tpm2 flushcontext --transient-object


tpm2_unseal()
{
	PIN="$1"
	tpm2 unseal \
		--auth "session:/tmp/session.ctx$PIN" \
		--object-context "$TPM_SEALED_HANDLE" \
		> /tmp/secret.bin \
	|| return $?

	# Successfully unsealed, extend the bootmode PCR
	warn "TPM disk key unsealed"
	tpm2 pcrextend >&2 "$BOOTMODE_PCR:sha256=$(echo postboot | sha256)"
	cat /tmp/secret.bin
	rm /tmp/secret.bin
	exit 0
}

if [ "$SEAL_PIN" != "1" ]; then
	tpm2_unseal ""
else
	for tries in 1 2 3; do
		while true; do
			# Use the askpass program to try to get a pin
			# retrieve a tpmtotp attestation so that the user knows
			# that the firmware is unmodified and that it is safe to
			# enter their credentials.
			totp="$(/usr/sbin/tpm2-totp --time calculate || echo TPM TOTP FAILED)"
			msg="$totp $MODE (Try $tries)

Enter unseal PIN for $CRYPTTAB_SOURCE ($CRYPTTAB_NAME): "

			PIN="$(/lib/cryptsetup/askpass "$msg")"

			if [ "$PIN" != "" ]; then
				break
			fi
		done

		# try to unseal with the provided PIN
		tpm2_unseal "+$PIN"
	done
fi

# if we ended up here, things are bad.
# The system will re-run the script to try to use the recovery key
die "UNSEALING FAILED"
