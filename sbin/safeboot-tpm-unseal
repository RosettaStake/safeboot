#!/bin/sh
# This is run in the initramfs context, not in the normal user space.
# The boot mode should have been extended in the start of the initramfs.
#
# It attempts to unseal the key from the TPM based on the PCRS passed
# on the command line using direct access since there is no resource
# manager. 
#
# If successful, PCR14 will be extended to prevent later stages from
# retrieving the decryption key.  The key is stored in a kernel key
# ring, so it should not be accessible to even a root user.
#
# If the unsealing fails, fall back to asking for the user's recovery key.
#
# turn off "echo flags are undefined"
# shellcheck disable=SC2039

# Default is no PCRs, which means do not unseal anything
PCRS=
BOOTMODE_PCR=14
MODE=unknown
HANDLE=0x81000000

# Direct access to the kernel resource manager
# since there is no standalone TPM resource manager in the initrd
export TPM2TOOLS_TCTI="device:/dev/tpmrm0"

sha256() { echo -n "$@" | sha256sum | cut -d' ' -f1 ; }
log() { echo >&2 "$@" ; }

# shellcheck disable=SC2013
for arg in $(cat /proc/cmdline)
do
    case "$arg" in
        safeboot.mode=*)
            MODE=${arg#safeboot.mode=}
            ;;
        safeboot.pcrs=*)
            PCRS=${arg#safeboot.pcrs=}
            ;;
        safeboot.mode-pcr=*)
            BOOTMODE_PCR=${arg#safeboot.mode-pcr=}
            ;;
        safeboot.handle=*)
            HANDLE=${arg#safeboot.handle=}
            ;;
        *)
            ;;
    esac
done

log "TPM mode=$MODE pcrs=$PCRS $BOOTMODE_PCR"

/usr/sbin/tpm2 pcrread >&2 \
	'sha256:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16'

#
# Attempt to unseal, outputing the binary key to stdout
#
if [ -n "$PCRS" ] && /usr/sbin/tpm2 unseal \
	--object-context "$HANDLE" \
	--auth pcr:"sha256:$PCRS,$BOOTMODE_PCR" \
; then
	# ensure that a local attacker can't re-read the key from the TPM
	# by extending pcr 14 with "postboot"
	log "TPM disk key unsealed"
	/usr/sbin/tpm2 pcrextend >&2 "$BOOTMODE_PCR:sha256=$(sha256 postboot)"
	exit 0
else
	# the key was not unsealed or no PCRs specified;
	# log the failure and ask the user for the recovery key
	log "Falling back to user pass phrase"
	/usr/sbin/tpm2 pcrextend >&2 "$BOOTMODE_PCR:sha256=$(sha256 bootfail)"

	# retrieve a tpmtotp attestation so that the user knows
	# that the firmware is unmodified and that it is safe to
	# enter their credentials.
	totp="$(/usr/sbin/tpm2-totp --time calculate || echo TPM TOTP FAILED)"
	msg="$totp $MODE

Enter recovery key for $CRYPTTAB_SOURCE ($CRYPTTAB_NAME): "

	/lib/cryptsetup/askpass "$msg"

	# TODO: should a PCR be extended so that this will only work
	# during boot?  Which PCR to use?  when should it be done?
	#/usr/sbin/tpm2 pcrextend >&2 "$BOOTMODE_PCR:sha256=$(sha256 totp-done)"
fi
